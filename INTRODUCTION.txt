STL:::
- Standard Template Library...
- Helps to apply the data structures in easy manner by using pre-defined classes and templates...
- 4 major components-: Containers, Iterators, Algorithm, Functors...

CONTAINERS::
- DS which help us to store object and data...
- Every container is implemented as a template class which contains various functions to do basic operations...
- TYPES of containers-: 
  -> Sequence Containers - Data is stored in linear manner. eg. array, vector, lists etc.
  -> Container Adaptors - Used existing containers to do some specific tasks.. eg. stack, queue etc.
  -> Associative Containers - Data is stored in sorted order. eg. set, map etc.
  -> Unordered Associative Containers - Data is stored in unsorted order. but allows faster insertion, deletion etc. eg. unordered set, unordered map etc.

ITERATORS::
- Iterators are just like pointers...
- They points to an element inside the containers...
- Helps in Manipulation of data...
- All iterators are not supported by all containers...
- Divided into 5 types-: (based on functionalities)
  -> Random Access - Most powerful iterator...kabhi bhi kisi index pe ja sakta hai...
  -> Bidirectional - Contains props of forward..They can move in both direction in any container...one at a time...
  -> Forward - Contains props of input and output...They can only move in forward direction in any container...one at a time...
  -> Input - Weakest iterator...Used by algos which process container sequentially...accessing elements...cant modify elements...dereferencing se val milti hai...
  -> Output - Same as input...used for assigning elements...dereferencing used to do that...
- No iterator is supported by stack, queue, priority queue...
- Random Access - Vectors, Deque
- Bidirectional - List, map, set, multimap, multiset
- it++ it-- 
  it[n] = *(it+n) 
- ADV -> In vectors, total no of elements nhi chahiye...v.end() will do the work...
- SYNTAX -> type :: iterator name; 

ALGORITHMS::
- Wide range of functions to do basic operations...
- 2 TYPES-:
  -> MANIPULATIVE - modifies elements of containers...like copy, replace, swap, reverse etc. 
  -> NON-MANIPULATIVE - doesnt modify elements...like sum, accumulate, count, find etc. 








 